// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nav.proto

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GridCells struct {
	Header     *Header  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	CellWidth  *Float64 `protobuf:"bytes,2,opt,name=cell_width,json=cellWidth" json:"cell_width,omitempty"`
	CellHeight *Float64 `protobuf:"bytes,3,opt,name=cell_height,json=cellHeight" json:"cell_height,omitempty"`
	Cells      []*Point `protobuf:"bytes,4,rep,name=cells" json:"cells,omitempty"`
}

func (m *GridCells) Reset()                    { *m = GridCells{} }
func (m *GridCells) String() string            { return proto.CompactTextString(m) }
func (*GridCells) ProtoMessage()               {}
func (*GridCells) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *GridCells) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GridCells) GetCellWidth() *Float64 {
	if m != nil {
		return m.CellWidth
	}
	return nil
}

func (m *GridCells) GetCellHeight() *Float64 {
	if m != nil {
		return m.CellHeight
	}
	return nil
}

func (m *GridCells) GetCells() []*Point {
	if m != nil {
		return m.Cells
	}
	return nil
}

type MapMetaData struct {
	MapLoadTime *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=map_load_time,json=mapLoadTime" json:"map_load_time,omitempty"`
	Resolution  *Float32                   `protobuf:"bytes,2,opt,name=resolution" json:"resolution,omitempty"`
	Width       *UInt32                    `protobuf:"bytes,3,opt,name=width" json:"width,omitempty"`
	Height      *UInt32                    `protobuf:"bytes,4,opt,name=height" json:"height,omitempty"`
	Origin      *Pose                      `protobuf:"bytes,5,opt,name=origin" json:"origin,omitempty"`
}

func (m *MapMetaData) Reset()                    { *m = MapMetaData{} }
func (m *MapMetaData) String() string            { return proto.CompactTextString(m) }
func (*MapMetaData) ProtoMessage()               {}
func (*MapMetaData) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *MapMetaData) GetMapLoadTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.MapLoadTime
	}
	return nil
}

func (m *MapMetaData) GetResolution() *Float32 {
	if m != nil {
		return m.Resolution
	}
	return nil
}

func (m *MapMetaData) GetWidth() *UInt32 {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *MapMetaData) GetHeight() *UInt32 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *MapMetaData) GetOrigin() *Pose {
	if m != nil {
		return m.Origin
	}
	return nil
}

type OccupancyGrid struct {
	Header *Header      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Info   *MapMetaData `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Data   *Bytes       `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *OccupancyGrid) Reset()                    { *m = OccupancyGrid{} }
func (m *OccupancyGrid) String() string            { return proto.CompactTextString(m) }
func (*OccupancyGrid) ProtoMessage()               {}
func (*OccupancyGrid) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *OccupancyGrid) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *OccupancyGrid) GetInfo() *MapMetaData {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *OccupancyGrid) GetData() *Bytes {
	if m != nil {
		return m.Data
	}
	return nil
}

type Odometry struct {
	Header       *Header              `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ChildFrameId *String              `protobuf:"bytes,2,opt,name=child_frame_id,json=childFrameId" json:"child_frame_id,omitempty"`
	Pose         *PoseWithCovariance  `protobuf:"bytes,3,opt,name=pose" json:"pose,omitempty"`
	Twist        *TwistWithCovariance `protobuf:"bytes,4,opt,name=twist" json:"twist,omitempty"`
}

func (m *Odometry) Reset()                    { *m = Odometry{} }
func (m *Odometry) String() string            { return proto.CompactTextString(m) }
func (*Odometry) ProtoMessage()               {}
func (*Odometry) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *Odometry) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Odometry) GetChildFrameId() *String {
	if m != nil {
		return m.ChildFrameId
	}
	return nil
}

func (m *Odometry) GetPose() *PoseWithCovariance {
	if m != nil {
		return m.Pose
	}
	return nil
}

func (m *Odometry) GetTwist() *TwistWithCovariance {
	if m != nil {
		return m.Twist
	}
	return nil
}

type Path struct {
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Poses  []*Pose `protobuf:"bytes,2,rep,name=poses" json:"poses,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *Path) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Path) GetPoses() []*Pose {
	if m != nil {
		return m.Poses
	}
	return nil
}

type GetPlanRequest struct {
	Start     *PoseStamped `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	Goal      *PoseStamped `protobuf:"bytes,2,opt,name=goal" json:"goal,omitempty"`
	Tolerance *Float32     `protobuf:"bytes,3,opt,name=tolerance" json:"tolerance,omitempty"`
}

func (m *GetPlanRequest) Reset()                    { *m = GetPlanRequest{} }
func (m *GetPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlanRequest) ProtoMessage()               {}
func (*GetPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *GetPlanRequest) GetStart() *PoseStamped {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *GetPlanRequest) GetGoal() *PoseStamped {
	if m != nil {
		return m.Goal
	}
	return nil
}

func (m *GetPlanRequest) GetTolerance() *Float32 {
	if m != nil {
		return m.Tolerance
	}
	return nil
}

type SetMapRequest struct {
	Map         *OccupancyGrid             `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
	InitialPose *PoseWithCovarianceStamped `protobuf:"bytes,2,opt,name=initial_pose,json=initialPose" json:"initial_pose,omitempty"`
}

func (m *SetMapRequest) Reset()                    { *m = SetMapRequest{} }
func (m *SetMapRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMapRequest) ProtoMessage()               {}
func (*SetMapRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

func (m *SetMapRequest) GetMap() *OccupancyGrid {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *SetMapRequest) GetInitialPose() *PoseWithCovarianceStamped {
	if m != nil {
		return m.InitialPose
	}
	return nil
}

func init() {
	proto.RegisterType((*GridCells)(nil), "choreo.GridCells")
	proto.RegisterType((*MapMetaData)(nil), "choreo.MapMetaData")
	proto.RegisterType((*OccupancyGrid)(nil), "choreo.OccupancyGrid")
	proto.RegisterType((*Odometry)(nil), "choreo.Odometry")
	proto.RegisterType((*Path)(nil), "choreo.Path")
	proto.RegisterType((*GetPlanRequest)(nil), "choreo.GetPlanRequest")
	proto.RegisterType((*SetMapRequest)(nil), "choreo.SetMapRequest")
}

func init() { proto.RegisterFile("nav.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0x65, 0xf2, 0x47, 0xcd, 0x84, 0x50, 0x69, 0x29, 0x55, 0x94, 0x1e, 0x0a, 0x2e, 0x2a,
	0xa0, 0x0a, 0xbb, 0x0d, 0xa8, 0x97, 0x4a, 0x3d, 0x00, 0xe2, 0x8f, 0x54, 0x04, 0xda, 0x50, 0x21,
	0xf5, 0x12, 0x6d, 0xec, 0x8d, 0xbd, 0x92, 0xed, 0x75, 0xbd, 0x13, 0x10, 0x97, 0x5e, 0xfa, 0x08,
	0x7d, 0x9b, 0xbe, 0x42, 0xdf, 0xa6, 0x4f, 0x50, 0xed, 0x7a, 0x4d, 0x02, 0xa4, 0x52, 0x8e, 0xf9,
	0xe6, 0x37, 0x9b, 0xf9, 0xe6, 0x1b, 0x43, 0x2b, 0x63, 0x37, 0x5e, 0x5e, 0x48, 0x94, 0xa4, 0x19,
	0xc4, 0xb2, 0xe0, 0xb2, 0xf7, 0x3a, 0x92, 0x32, 0x4a, 0xb8, 0x6f, 0xd4, 0xd1, 0x64, 0xec, 0xa3,
	0x48, 0xb9, 0x42, 0x96, 0xe6, 0x25, 0xd8, 0x5b, 0xcb, 0x0b, 0x91, 0x0a, 0x14, 0x37, 0xdc, 0x1f,
	0xdd, 0x21, 0x57, 0x4f, 0xe5, 0x71, 0x22, 0x19, 0x5a, 0xf9, 0xe5, 0x54, 0x8e, 0x39, 0x0b, 0x79,
	0x61, 0xf5, 0xd5, 0xa9, 0x2e, 0xb2, 0x39, 0xb0, 0xc2, 0x42, 0x64, 0x51, 0xf5, 0x76, 0xc4, 0x65,
	0xca, 0xb1, 0x10, 0x81, 0x9f, 0xcb, 0x29, 0xfe, 0x62, 0x56, 0x56, 0xfc, 0x29, 0x8c, 0xb7, 0x42,
	0x59, 0xd8, 0xfd, 0xed, 0x40, 0xeb, 0xa4, 0x10, 0xe1, 0x21, 0x4f, 0x12, 0x45, 0xde, 0x42, 0xb3,
	0x1c, 0xa7, 0xeb, 0xac, 0x3b, 0xdb, 0xed, 0xfe, 0x8a, 0x57, 0xda, 0xf7, 0x4e, 0x8d, 0x4a, 0x6d,
	0x95, 0x78, 0x00, 0x01, 0x4f, 0x92, 0xe1, 0xad, 0x08, 0x31, 0xee, 0x2e, 0x19, 0xf6, 0x79, 0xc5,
	0x1e, 0x6b, 0x9f, 0x1f, 0xf7, 0x69, 0x4b, 0x23, 0xd7, 0x9a, 0x20, 0xef, 0xa1, 0x6d, 0xf8, 0x98,
	0x8b, 0x28, 0xc6, 0x6e, 0x6d, 0x7e, 0x83, 0x79, 0xf3, 0xd4, 0x20, 0xe4, 0x0d, 0x34, 0xf4, 0x2f,
	0xd5, 0xad, 0xaf, 0xd7, 0xb6, 0xdb, 0xfd, 0x4e, 0xc5, 0x5e, 0x6a, 0xa3, 0xb4, 0xac, 0xb9, 0x7f,
	0x1d, 0x68, 0x9f, 0xb3, 0xfc, 0x9c, 0x23, 0x3b, 0x62, 0xc8, 0xc8, 0x67, 0xe8, 0xa4, 0x2c, 0x1f,
	0x26, 0x92, 0x85, 0x43, 0x9d, 0x8f, 0x75, 0xd1, 0xf3, 0xca, 0xf0, 0xbc, 0x2a, 0x3c, 0xef, 0xaa,
	0x0a, 0x8f, 0xb6, 0x53, 0x96, 0x7f, 0x91, 0x2c, 0xd4, 0x0a, 0xf1, 0x01, 0x0a, 0xae, 0x64, 0x32,
	0x41, 0x21, 0xb3, 0xb9, 0xb6, 0xf6, 0xfa, 0x74, 0x06, 0x21, 0x9b, 0xd0, 0x28, 0x57, 0x50, 0x7b,
	0xb8, 0xae, 0xaf, 0x67, 0x99, 0x46, 0xcb, 0x62, 0xb9, 0x55, 0x63, 0xbc, 0x3e, 0x17, 0xb3, 0x55,
	0xb2, 0x09, 0x4d, 0x59, 0x88, 0x48, 0x64, 0xdd, 0x86, 0xe1, 0x96, 0xa7, 0xa6, 0x15, 0xa7, 0xb6,
	0xe6, 0xfe, 0x74, 0xa0, 0x73, 0x11, 0x04, 0x93, 0x9c, 0x65, 0xc1, 0x9d, 0x8e, 0x6e, 0xe1, 0xd4,
	0xb6, 0xa0, 0x2e, 0xb2, 0xb1, 0xb4, 0xc6, 0x56, 0x2b, 0x6a, 0x66, 0x83, 0xd4, 0x00, 0x64, 0x03,
	0xea, 0x21, 0x43, 0x66, 0x5d, 0xdd, 0xef, 0xfe, 0x40, 0xdf, 0x35, 0x35, 0x25, 0xf7, 0x8f, 0x03,
	0xcf, 0x2e, 0x42, 0x73, 0x51, 0x77, 0x0b, 0x0f, 0xb0, 0x0f, 0x2b, 0x41, 0x2c, 0x92, 0x70, 0x38,
	0x2e, 0x58, 0xca, 0x87, 0x22, 0xb4, 0xa3, 0xdc, 0xf3, 0x03, 0x73, 0xde, 0x74, 0xd9, 0x50, 0xc7,
	0x1a, 0x3a, 0x0b, 0x89, 0x07, 0x75, 0x7d, 0xc7, 0x76, 0x9a, 0xde, 0xec, 0x52, 0xae, 0x05, 0xc6,
	0x87, 0xf2, 0x86, 0x15, 0x82, 0x65, 0x01, 0xa7, 0x86, 0x23, 0x1f, 0xa0, 0x61, 0x2e, 0xdc, 0x6e,
	0xfb, 0x55, 0xd5, 0x70, 0xa5, 0xc5, 0x47, 0x1d, 0x25, 0xe9, 0x52, 0xa8, 0x5f, 0xb2, 0x2a, 0xa9,
	0x05, 0x8c, 0xb8, 0xd0, 0xd0, 0x7f, 0xa5, 0xba, 0x4b, 0xe6, 0x3a, 0x1f, 0x06, 0x55, 0x96, 0xdc,
	0x5f, 0x0e, 0xac, 0x9c, 0x70, 0xbc, 0x4c, 0x58, 0x46, 0xf9, 0xf7, 0x09, 0x57, 0x48, 0x76, 0xa0,
	0xa1, 0x90, 0x15, 0x68, 0x5f, 0x5f, 0x9d, 0x6d, 0x1b, 0xe8, 0x73, 0xe4, 0x21, 0x2d, 0x09, 0x9d,
	0x55, 0x24, 0x59, 0xf2, 0x38, 0xab, 0x59, 0xd2, 0x00, 0x64, 0x17, 0x5a, 0x28, 0x13, 0x5e, 0x68,
	0x3b, 0x73, 0x3f, 0xac, 0xbd, 0x3e, 0x9d, 0x12, 0xee, 0x0f, 0xe8, 0x0c, 0x38, 0x9e, 0xb3, 0xbc,
	0x9a, 0x69, 0x0b, 0x6a, 0x29, 0xcb, 0xed, 0x44, 0x6b, 0x55, 0xe7, 0x83, 0x03, 0xa3, 0x9a, 0x20,
	0x47, 0xb0, 0x2c, 0x32, 0x81, 0x82, 0x25, 0x43, 0x13, 0x47, 0x39, 0xd9, 0xc6, 0xff, 0xe3, 0xa8,
	0xe6, 0x6c, 0xdb, 0x36, 0x4d, 0x1c, 0xbc, 0xfb, 0xb6, 0x13, 0x09, 0x8c, 0x27, 0x23, 0x2f, 0x90,
	0xa9, 0x4f, 0xe5, 0x48, 0xe2, 0x00, 0x27, 0xa1, 0x90, 0x7e, 0xf9, 0xce, 0x6e, 0xaa, 0x22, 0x3f,
	0x55, 0xd1, 0xa7, 0x54, 0x45, 0xa3, 0xa6, 0xf9, 0x60, 0xf7, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x90, 0xf1, 0x59, 0x60, 0x90, 0x05, 0x00, 0x00,
}
